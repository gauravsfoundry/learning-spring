<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Define your beans here -->
    <bean id="myFortuneService"
          class="com.personal.gaurav.springdemo.HappyFortuneService">
    </bean>

    <bean   id="myCoach"
            class="com.personal.gaurav.springdemo.TrackCoach"
            init-method="myStartupMethod"
            destroy-method="myExitMethod" >
            <!--by changing coach class above, we can dynamically change the object being created by Spring container -->

        <property name="fortuneService" ref="myFortuneService" />
        <!--ref should match the dependency bean name-->
        <!--
        Step 1: Spring creates a bean with name myFortuneService which is an instance of HappyFortuneService
        Interface names not allowed as they cant be instantiated. Something like below happens:
        HappyFortuneService myFortuneService = new HappyFortuneService();
        Step 2: Spring creates a bean with name myCoach which is an instance of TrackCoach
        Since we have specified a dependency through a ref, Spring will inject the specified dependency either through
        setter methods or constructor to create a coach object
        Something like below happens:
        TrackCoach myCoach = new TrackCoach(); OR TrackCoach myCoach = new TrackCoach(myFortuneService);
        myCoach.setFortuneService(myFortuneService) (If setter injection is used)
        -->
    </bean>
    
</beans>
